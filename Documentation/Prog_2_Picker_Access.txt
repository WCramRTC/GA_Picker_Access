# GA_Picker_Access

The picker is a control that is similar to a drop down menu. When clicked a list of different options is display. When an option is selected, the menu is then hidden again, showing only the selected option.

The syntax to place a picker is <Picker />.
The 3 common attributes are

- `x:Name` gives a name to the control for referencing in code-behind.
- `Title` is a kind of instruction that is shown to the user to explain what should be done with the picker
- `SelectedIndexChanged` is an event that triggers when the selected item changes. Kind of like saying "a new option has been chosen, do something".

In the .cs the most common properties are

- `.ItemsSource` which was can assign a list to, so we can populate it with those values
- `.SelectedIndex` which will return the index of the selected item

```xml
    <Picker x:Name="myPicker"
            Title="Select an item"
             SelectedIndexChanged="OnPickerSelectedIndexChanged">
    </Picker>
```



```csharp
    public partial class MainPage : ContentPage
{
    public MainPage()
    {
        InitializeComponent();

        myPicker.ItemsSource = new List<string> { "Item1", "Item2", "Item3", "Item4" };
    }

    private void OnPickerSelectedIndexChanged(object sender, EventArgs e)
    {
        var picker = (Picker)sender;
        int selectedIndex = picker.SelectedIndex;

        if (selectedIndex != -1)
        {
            // Handle the selection
            Console.WriteLine($"Selected item: {picker.Items[selectedIndex]}");
        }
    }
}
```

## Quick Assignment

`Designer`
1. Create a maui application
2. Add a Picker object
3. Give it an x:name of my picker
4. Give it a title of "Choose a name"
5. Add a `SelectedIndexChanged` event
6. Add a label that says "Enter a name"
7. Add an editor with a name of editorAddName
8. Add a button that says "Add a name" and has a name of buttonAddName.
9. Add a click event to the button.
10. Add a label with a name that is labelDisplayChosenNameHere

`Code`

11. Create a global list of strings with 5 names.
12. Attach the list to the pickers .ItemsSource.
13. In the button click event, when the button is clicked, add the name from the editorAddName to the list, then refresh the picker
14. In the selectedIndexChanged event, display the chosen name to the labelDisplayChosenNameHere label, with the message "You have chosen the name" and display the name from the picker.

---

## Step By Step

### Step 1 - Create a new Maui Project

Create a new Maui project.
- Give it a name of ***GA\_Picker\_YourName***
- Remove provided template code

 ### Step 2 - Add a Picker Object

 In your `MainPage.xaml` add the following xaml code.

 ```xml
    <Picker 
        x:Name="myPicker" 
        Title="Choose a name" 
        SelectedIndexChanged="OnPickerSelectedIndexChanged" 
    />  
 ```

The `<Picker />` tag adds a dropdown-like control that shows a list of options when clicked. It allows users to select an option, hiding the menu and displaying the chosen item.

- `x:Name` identifies the Picker in our C# code.


- The `Title` property provides user guidance for the Picker's purpose and expected data selection.

- The `SelectedIndexChanged` event in .NET MAUI triggers when the user chooses a different item from a Picker, enabling you to execute custom code in response to the selection change.

### Step 3 - Add the rest of our XAML code

Add the following code to your `MainPage.xaml`

```xml
    <!-- Label -->
    <Label Text="Enter a name" />

    <!-- Editor -->
    <Editor x:Name="editorAddName" />

    <!-- Button -->
    <Button x:Name="buttonAddName" Text="Add a name" Clicked="OnButtonAddNameClicked" />

    <!-- Display Label -->
    <Label x:Name="labelDisplayChosenNameHere" />
```

We are building an app to

1. Add names to a C Sharp list.
2. Refreshes the Picker to display the new name
3. Displays the name to a label, when selected.

### Step 4 - Create a List in our `MainPage.xaml.cs`

You are going to add a `List<string>` to your C Sharp code. Add the following code to your C Sharp to your global scope. Replace `Name1`, `Name2`, `Name3`, with your own choices.

```csharp
// Code starts here
    private List<string> namesList = new List<string>
    {
        "Name1",
        "Name2",
        "Name3",
        "Name4",
        "Name5"
    };
```

This method populates the list during initialization.

### Step 5 - Bind the List to our Picker

In the `MainPage()` method, add the following code, underneath `Initialize Component()`.

```csharp
    // Bind the namesList to the Picker's ItemsSource
    myPicker.ItemsSource = namesList;
```

`myPicker` is the name we gave our Picker control. 

Assigning our `nameList` to the `.ItemsSource` property displays the values from our list, in the Picker.

Test Our Code:

Run your app. If you everything is connected properly, the names you added to your List will display in your picker.

### Step 6 - Add Name to our List and Display to Picker

Inside of the `OnButtonAddNameClicked` event, add the following code.

```csharp
    // Add the name from the editor to the list
    string newName = editorAddName.Text;
    if (!string.IsNullOrWhiteSpace(newName))
    {
        namesList.Add(newName);

        // Refresh the Picker
        myPicker.ItemsSource = null;
        myPicker.ItemsSource = namesList;
    }
```

When the button is clicked

The first line, `string newName = editorAddName.Text` saves the 
text in our editorAddName to the variable `newName`

Our if statement calls a special method.  
`!string.IsNullOrWhiteSpace(newName)`   

`!string.IsNullOrWhiteSpace(newName)` uses the ! (NOT) operator to negate the result of string.IsNullOrWhiteSpace(newName). In other words, it checks if newName is not empty or non-existent, ensuring that the user has indeed entered some text into the input.

At `namesList.Add(newName)` we add the users input to our list.

To refresh the picker we do

```csharp
    // Refresh the Picker
    myPicker.ItemsSource = null;
    myPicker.ItemsSource = namesList;
```

The Picker does not update automatically when something changes in our List. So we detach the list with `myPicker.ItemsSource = null` and then reattach the list with `myPicker.ItemsSource = namesList;`. This updates the information in the picker. This happens so fast the user will only see the new name added.

Test Our Code:

- Run your application
- Type a name in the text box
- Click add name
- Click on the Picker, your name should have appeared

### Step 7 - Display Chosen Name in the label

Now we will add a `Selected Index Changed` even to our Picker. This will run when the user picks a different option in our Picker.

In our `OnPickerSelectedIndexChanged` event, add the following code.

```csharp
    // Get the index of the selected item in the Picker
    int selectedIndex = myPicker.SelectedIndex;

    // Retrieve the name from the namesList based on the selected index
    string chosenName = namesList[selectedIndex];

    // Check if the chosenName is not empty or non-existent
    if (!string.IsNullOrWhiteSpace(chosenName))
    {
        // Update the label to display the chosen name
        labelDisplayChosenNameHere.Text = "You have chosen the name: " + chosenName;
    }

```

In our first line we call the `myPicker.SelectedIndex`. This returns the index of the selected item. Since the picker is attached to our list, the index coincides with the name on our list.

Example:
- User Clicks the first option
- The first option is index 0, that is saved to our selectedIndex variable.
- We pass selectedIndex to our namesList[selectedIndex] and save that value to our chosenName variable
- We then display that name.
- Because the Picker list and our namesList have the same items, the first name in both should be the same. If not, something has not been properly updated.

We know what our `if` statement is doing, it's validating our string.

```csharp
    // Update the label to display the chosen name
    labelDisplayChosenNameHere.Text = "You have chosen the name: " + chosenName;
```

The last line of code displays the message, "You have chosen the name" and attaches the chosen name. This should display to our label.

Test Your Code:

- Run your application
- Choose a name in the picker
- The message in your label should appear

---

### Final Result

You should now have a small application that displays names in a Picker Control.

We can add items to our list, and have those changes reflect in the picker.

And clicking on a name, our label message changes to display the chosen name.

--- 
## Full Code

```xml
    <!-- Picker -->
    <Picker x:Name="myPicker" Title="Choose a name" SelectedIndexChanged="OnPickerSelectedIndexChanged">
        <!-- Items will be added programmatically in the code-behind -->
    </Picker>
        
    <!-- Label -->
    <Label Text="Enter a name" />

    <!-- Editor -->
    <Editor x:Name="editorAddName" />

    <!-- Button -->
    <Button x:Name="buttonAddName" Text="Add a name" Clicked="OnButtonAddNameClicked" />

    <!-- Display Label -->
    <Label x:Name="labelDisplayChosenNameHere" />

```

```csharp

      private List<string> namesList = new List<string>
        {
            "Name1",
            "Name2",
            "Name3",
            "Name4",
            "Name5"
        };

        public MainPage()
        {
            InitializeComponent();

            // Bind the namesList to the Picker's ItemsSource
            myPicker.ItemsSource = namesList;
        }

        private void OnButtonAddNameClicked(object sender, EventArgs e)
        {
            // Add the name from the editor to the list
            string newName = editorAddName.Text;
            if (!string.IsNullOrWhiteSpace(newName))
            {
                namesList.Add(newName);

                // Refresh the Picker
                myPicker.ItemsSource = null;
                myPicker.ItemsSource = namesList;
            }
        }

        private void OnPickerSelectedIndexChanged(object sender, EventArgs e)
        {
                // Display the chosen name in the label
            int selectedIndex = myPicker.SelectedIndex;
            string chosenName = namesList[selectedIndex];
            if (!string.IsNullOrWhiteSpace(chosenName))
            {
                labelDisplayChosenNameHere.Text = "You have chosen the name: " + chosenName;
            }
        }

```